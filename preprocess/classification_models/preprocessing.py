# -*- coding: utf-8 -*-
"""preprocessing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WfABqQpiLZxbZ5VNl_SaqwKGQxSvV8w0

# Import Librarieries
"""

#  pip install contractions==0.1.73
import re
import nltk
import string
nltk.download('punkt_tab')
nltk.download('wordnet')
nltk.download('punkt')

import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
from nltk.corpus import stopwords
nltk.download('stopwords')
import contractions
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix
from textblob import TextBlob
from sklearn.pipeline import Pipeline
from sklearn.linear_model import SGDClassifier


def specific_stopwords() :
      """function to return specific stopwords for intent class"""
      stop_word_set = set(stopwords.words("english"))
      essential_words = {'not', 'no', 'cannot','dont'}
      custom_stop_words = stop_word_set - essential_words
      custom_stop_words = list(custom_stop_words)
      return custom_stop_words



def remove_stopwords(text) : 
    print(text)
    custom_stop_words = specific_stopwords()
    tokens = nltk.word_tokenize(text)
    filtered_tokens = [word for word in tokens if word.lower() not in custom_stop_words]
    print(filtered_tokens)
    return ' '.join(filtered_tokens)



def preprocess_stopwords(df,column) :

    """Input : your dataframe and specific column to be cleaned
      Output : your dataframe cleaned"""
    print(column)
    df[column] = df[column].apply(remove_stopwords)
    return df

def clean_text_advanced(text):

    """Input : Text (each row in dataframe)
       Output: Cleaned Text"""
    # Expand contractions
    text = contractions.fix(text)

    # Lowercase
    text = text.lower()

    # Remove digits and punctuation
    text = re.sub(r'\{\{.*?\}\}', '', text)

    text = text.split()
    text = ' '.join(text)
    text = re.sub('\[.*?\]', '', text)
    text = re.sub('https?://\S+|www\.\S+', '', text)
    text = re.sub('<.*?>+', '', text)
    text = re.sub('[%s]' % re.escape(string.punctuation), '', text)
    text = re.sub('\n', '', text)
    text = re.sub('\w*\d\w*', '', text)

     # Tokenize text
    tokens = nltk.word_tokenize(text)
    lemmatizer = WordNetLemmatizer()
    # Lemmatize tokens
    lemmatized_tokens = [lemmatizer.lemmatize(token, pos ='v') for token in tokens]
    lemmatized_tokens = [lemmatizer.lemmatize(token, pos ='a') for token in tokens]
    lemmatized_tokens = [lemmatizer.lemmatize(token, pos ='r') for token in tokens]
    lemmatized_tokens = [lemmatizer.lemmatize(token, pos ='s') for token in tokens]
    lemmatized_tokens = [lemmatizer.lemmatize(token, pos ='n') for token in tokens]

    # Join tokens back into a string
    cleaned_text = ' '.join(lemmatized_tokens)

    # Optional: Spell correction (can slow down processing)
    cleaned_text = str(TextBlob(cleaned_text).correct())


    return cleaned_text


def clean_duplicates(dataframe) :
    """Input : DataFrame
      Output : DataFrame without duplicated rows or columns"""

    # Drop nulls and duplicates
    dataframe.dropna(inplace=True)
    dataframe.drop_duplicates(inplace=True)

    return dataframe

def tfidf_vectorization(x_train,x_test):

    """convert to vectorized form """
    vectorizer = TfidfVectorizer(max_features=5000)
    x_train_vec = vectorizer.fit_transform(x_train)
    x_test_vec = vectorizer.transform(x_test)

    x_train_tfidf_dense =x_train_vec.toarray()
    feature_names = vectorizer.get_feature_names_out()
    train_tfidf_df = pd.DataFrame(x_train_tfidf_dense,columns = feature_names)

    x_test_tfidf_dense =x_test_vec.toarray()
    feature_names = vectorizer.get_feature_names_out()
    test_tfidf_df = pd.DataFrame(x_test_tfidf_dense,columns = feature_names)

    return train_tfidf_df,test_tfidf_df

def preprocess_text_column(df, column):

    """Input : your dataframe and specific column to be cleaned
      Output : your dataframe cleaned"""
    print(column)
    df[column] = df[column].apply(clean_text_advanced)
    return df


def split_and_encode(df, text_column, label_column, test_size=0.2, random_state=42):
    
    """Input : 
       DataFrame
       text_column
       label_column 
       
       
       Output : 
       X_train,X_test
       y_train_encoded 
       y_test_encoded"""

    X = df[text_column]
    y = df[label_column]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)

    encoder = LabelEncoder()
    y_train_encoded = encoder.fit_transform(y_train)
    y_test_encoded = encoder.transform(y_test)

    return X_train, X_test, y_train_encoded, y_test_encoded, encoder

def get_vectorizer(): 

    """return TFidfVectorizer with clean_text function and required stopwords"""
    return TfidfVectorizer(
        max_features=5000,
        lowercase=True,
        stop_words=remove_stopwords(),
        preprocessor=clean_text_advanced,
        ngram_range=(1, 2)  # or any config you need
    )


